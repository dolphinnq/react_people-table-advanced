{"version":3,"sources":["components/Navbar.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","types/SortOrder.ts","components/PeopleTable.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","HomePage","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SexValues","centuriesValues","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","map","type","placeholder","onChange","event","target","trim","toLowerCase","century","includes","filter","cent","length","PersonLink","person","slug","name","SortOrders","PeopleTable","people","useParams","sort","order","values","column","normalizedOrder","toUpperCase","slice","newSort","newOrder","father","find","human","fatherName","mother","motherName","born","died","PeoplePage","useState","setPeople","isError","setIsError","isLoading","setIsLoading","useEffect","fetch","then","response","json","catch","error","finally","preparedPeople","visiblePeople","normalizedQuery","Math","ceil","person1","person2","Name","Sex","localeCompare","Born","Died","reverse","getFilteredPeople","emptyTable","noFilterResults","NotFoundPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2d58d61d.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  cn('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { SetURLSearchParams } from 'react-router-dom';\n\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  searchParams: URLSearchParams,\n  setSearchParams: SetURLSearchParams,\n};\n\nenum SexValues {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n\nconst centuriesValues = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC<Props> = ({\n  searchParams,\n  setSearchParams,\n}) => {\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newParams = getSearchWith(\n      searchParams, { query: event.target.value.trim().toLowerCase() || null },\n    );\n\n    setSearchParams(newParams);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SexValues).map(([key, value]) => (\n          <SearchLink\n            key={value}\n            className={cn({\n              'is-active': sex === value,\n            })}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(cent => cent !== century)\n                    : [...centuries, century],\n                }}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            query: null,\n            sex: null,\n            centuries: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport { Person } from '../types';\n\ntype Props = {\n  person?: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`${person?.slug}`}\n      className={cn({\n        'has-text-danger': person?.sex === 'f',\n      })}\n    >\n      {person?.name}\n    </Link>\n  );\n};\n","export enum SortOrders {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import cn from 'classnames';\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SortOrders } from '../types/SortOrder';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n  searchParams: URLSearchParams,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, searchParams }) => {\n  const { slug } = useParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(SortOrders).map(column => {\n            const normalizedOrder = column[0].toUpperCase() + column.slice(1);\n            let newSort = null;\n            let newOrder = null;\n\n            if (sort !== column && order !== 'desc') {\n              newSort = column;\n            }\n\n            if (sort === column && order !== 'desc') {\n              newSort = column;\n              newOrder = 'desc';\n            } else {\n              newOrder = null;\n            }\n\n            return (\n              <th key={column}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {normalizedOrder}\n                  <SearchLink\n                    params={{\n                      sort: newSort,\n                      order: newOrder,\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('fas', {\n                          'fa-sort': sort !== column,\n                          'fa-sort-up': sort === column && order !== 'desc',\n                          'fa-sort-down': sort === column && order === 'desc',\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const father = people.find(human => human.name === person.fatherName);\n          const mother = people.find(human => human.name === person.motherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={cn({\n                'has-background-warning': person.slug === slug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {mother ? (\n                  <PersonLink person={mother} />\n                ) : (\n                  person.motherName || '-'\n                )}\n              </td>\n              <td>\n                {father ? (\n                  <PersonLink person={father} />\n                ) : (\n                  person.fatherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { SortOrders } from '../types/SortOrder';\n\ninterface FilterOptions {\n  people: Person[];\n  query: string;\n  sex: string;\n  centuries: string[];\n  sort: string;\n  order: string;\n}\n\nconst getFilteredPeople = ({\n  people,\n  query,\n  sex,\n  centuries,\n  sort,\n  order,\n}: FilterOptions) => {\n  let visiblePeople = [...people];\n\n  if (query) {\n    const normalizedQuery = query.trim();\n\n    visiblePeople = visiblePeople.filter(person => (\n      person.name.toLowerCase().includes(normalizedQuery)\n      || person.fatherName?.toLowerCase().includes(normalizedQuery)\n      || person.motherName?.toLowerCase().includes(normalizedQuery)\n    ));\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(person => (\n      centuries.includes(Math.ceil(person.born / 100).toString())\n    ));\n  }\n\n  if (sort) {\n    visiblePeople.sort((person1, person2) => {\n      switch (sort) {\n        case SortOrders.Name:\n        case SortOrders.Sex:\n          return person1[sort].localeCompare(person2[sort]);\n\n        case SortOrders.Born:\n          return person1.born - person2.born;\n\n        case SortOrders.Died:\n          return person1.died - person2.died;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === 'desc') {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    fetch('https://mate-academy.github.io/react_people-table/api/people.json')\n      .then(response => response.json())\n      .then(setPeople)\n      .catch(error => {\n        setIsError(true);\n        throw error;\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedPeople = getFilteredPeople({\n    people,\n    query,\n    sex,\n    centuries,\n    sort,\n    order,\n  });\n\n  const emptyTable = !isError && !isLoading && !people.length;\n  const noFilterResults = !isLoading\n    && !preparedPeople.length\n    && people.length > 0;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                searchParams={searchParams}\n                setSearchParams={setSearchParams}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {preparedPeople.length > 0 && (\n                <PeopleTable\n                  people={preparedPeople}\n                  searchParams={searchParams}\n                />\n              )}\n\n              {noFilterResults && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {emptyTable && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":slug\" />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}